package main

import (
	"encoding/json"
	"fmt"

	"log"
	"net/http"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

const apiUrl = "http://backend:8080"

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–∞
var chatID int64

var bot *tgbotapi.BotAPI

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
func init() {
	var err error
	bot, err = tgbotapi.NewBotAPI("8168169856:AAEh6I7uQyl9dKale7E21uoEiVWXzsQAsFE")
	if err != nil {
		log.Fatal(err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func sendMessage(msg string) {
	if len(msg) > 4096 {
		// –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
		for i := 0; i < len(msg); i += 4096 {
			part := msg[i:min(i+4096, len(msg))]
			message := tgbotapi.NewMessage(chatID, part)
			bot.Send(message)
		}
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
		message := tgbotapi.NewMessage(chatID, msg)
		bot.Send(message)
	}
}



func sendWelcomeMessage() {
    welcomeMessage := `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç! üéâ

–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:

‚û°Ô∏è /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

‚û°Ô∏è /programs - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º.

‚û°Ô∏è /programs/<type> - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —Ç–∏–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /programs/—Å—Ç–∏–ø–µ–Ω–¥–∏—è).

‚û°Ô∏è /programs_tags/<tag> - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —Ç–µ–≥–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, /programs_tags/–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞).

üí°–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–≥—É –∏–ª–∏ —Ç–∏–ø—É –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏ <type> –∏ <tag> –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- –ù–∞–ø—Ä–∏–º–µ—Ä: /programs/—Å—Ç–∏–ø–µ–Ω–¥–∏—è –∏–ª–∏ /programs_tags/–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞.

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π –±–æ—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Å–µ–±—è!`

    message := tgbotapi.NewMessage(chatID, welcomeMessage)
    bot.Send(message)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º —Å —Å–µ—Ä–≤–µ—Ä–∞
func getPrograms() string {
	resp, err := http.Get(apiUrl + "/programs")
	if err != nil {
		log.Printf("Error fetching programs: %s", err)
		return "Error fetching programs"
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		log.Printf("Error: Received non-OK status: %d", resp.StatusCode)
		return fmt.Sprintf("Error fetching programs, status code: %d", resp.StatusCode)
	}

	var programs []map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&programs); err != nil {
		log.Printf("Error decoding response: %s", err)
		return "Error decoding response"
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(programs) == 0 {
		return "No programs found."
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var result strings.Builder
	for _, program := range programs {
		result.WriteString(fmt.Sprintf("Title: %s\nType: %s\nDescription: %s\n\n", program["title"], program["type"], program["description"]))
	}
	return result.String()
}

func getProgramsByType(programType string) string {
	resp, err := http.Get(apiUrl + "/programs/" + programType)
	if err != nil {
		log.Printf("Error fetching programs by type: %s", err)
		return "Error fetching programs by type"
	}
	defer resp.Body.Close()

	var programs []map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&programs); err != nil {
		return "Error decoding response"
	}

	var result strings.Builder
	for _, program := range programs {
		result.WriteString(fmt.Sprintf("Title: %s\nType: %s\nDescription: %s\n\n", program["title"], program["type"], program["description"]))
	}
	return result.String()
}

func getProgramsByTags(tags string) string {
	query := apiUrl + "/programs/tags?tags=" + tags
	resp, err := http.Get(query)
	log.Printf("REQ := %s", query)
	if err != nil {
		log.Printf("Error fetching programs by tags: %s", err)
		return "Error fetching programs by tags"
	}
	defer resp.Body.Close()

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞

	var programs []map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&programs); err != nil {
		return "Error decoding response"
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(programs) == 0 {
		return "No programs found for the specified tags."
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var result strings.Builder
	for _, program := range programs {
		result.WriteString(fmt.Sprintf("Title: %s\nType: %s\nDescription: %s\n\n", program["title"], program["type"], program["description"]))
	}
	return result.String()
}

func handleMessages(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID = update.Message.Chat.ID
	log.Printf("Received message: %s", update.Message.Text) // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch {
	case update.Message.Text == "/start":
        sendWelcomeMessage()	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "/programs/tags?tags=<tags>"
	case strings.HasPrefix(update.Message.Text, "/programs_tags/"):
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
		tags := strings.TrimPrefix(update.Message.Text, "/programs_tags/")
		tags = strings.TrimSpace(tags)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
		if tags == "" {
			sendMessage("Please provide tags, e.g., /programs/tags/–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞,–Ω–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ —Ç–µ–≥–∞–º
		sendMessage("Fetching programs with tags: " + tags)
		programsMessage := getProgramsByTags(tags) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–≥–∞–º
		sendMessage(programsMessage)               // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "/programs/<type>"
	case strings.HasPrefix(update.Message.Text, "/programs/"):
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
		programType := strings.TrimPrefix(update.Message.Text, "/programs/")
		programType = strings.TrimSpace(programType)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ —É–∫–∞–∑–∞–Ω
		if programType == "" {
			sendMessage("Please specify the type of program, e.g., /programs/—Å—Ç–∏–ø–µ–Ω–¥–∏—è")
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ —Ç–∏–ø—É
		sendMessage("Fetching programs of type: " + programType)
		sendMessage(getProgramsByType(programType)) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–∏–ø—É –ø—Ä–æ–≥—Ä–∞–º–º—ã

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/programs"
	case update.Message.Text == "/programs":
		sendMessage("Fetching all programs...")
		time.Sleep(time.Duration(5) * time.Second) // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		programs := getPrograms()                  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
		log.Printf("Programs: %s", programs)       // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
		sendMessage(programs)                      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

	default:
		sendMessage("Invalid command. Please use /programs/<type> (e.g., /programs/—Å—Ç–∏–ø–µ–Ω–¥–∏—è) or /programs/tags?tags=<tag1>,<tag2>.")
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	log.Printf("TG WORKS")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatal(err)
	}

	for update := range updates {
		handleMessages(update)
	}
}
